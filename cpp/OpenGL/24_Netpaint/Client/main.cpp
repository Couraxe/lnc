#include <iostream>
#include <string>
#include <memory>
#include <vector>
#include <optional>

#include <Client.h>
#include <GLApp.h>
#include <Rand.h>
#include <Mat4.h>

#include "../PainterCommon.h"


/* GIMP RGB C-Source image dump (test.c) */
 
static const struct {
  int    width;
  int    height;
  int    bytes_per_pixel; /* 2:RGB16, 3:RGB, 4:RGBA */
  uint8_t    pixel_data[64 * 46 * 3 + 1];
} gimp_image = {
  64, 46, 3,
  "<_\254;_\254:_\253\071^\253\071]\253\071\\\252\071\\\252\071\\\252\070\\\252\070"
  "\\\252\070[\253\070[\253\067[\252\067[\251\070K\205:/-E\065,C-\"XH@fRFl\\QbODC"
  ",\"%\022\017\025\011\007\017\004\004\013\003\003\004\001\002\063+(`ULTHA\060!\034\030\013\014\011\002\003"
  "\006\002\003\006\002\003\014\003\005\025\010\012\032\013\013\027\010\010\020\007\012\034#J;Z\250<^\257<"
  "]\256;[\255\071Z\254\071X\252\067W\251\066U\247\063R\243\061P\240\060N\236/L\234"
  "-J\230,H\226+F\224)C\220'A\215'?\213$=\210$:\206\"\071\204!\070\202>c\260?"
  "c\256>c\257=b\256>b\256<`\254<a\255;`\254<`\255<a\255;_\254;_\255:^\254\071"
  "W\235\070-\061?\062+H\064*K:\060eSIi[RgSH_J>D/&+\032\024$\026\021\026\012\011\005\002\002\006"
  "\001\002+\032\026L:\062H;\064\060\"\035\035\017\015\021\006\006\014\004\004\010\003\004\007\001\002\014\003\004"
  "\020\005\010\025\010\012\021\007\011\016\013\033,Ay>b\262>a\262>`\261<_\257<]\255:[\253"
  "\071Y\252\067W\246\066U\244\064R\242\062Q\240\061O\235/L\232.J\230,H\224*E\222"
  "(D\217(C\215&A\212%>\211$<\206Ci\263Ch\263Bg\262Af\262?e\261@d\261@e\260"
  "?e\260>d\260?d\260?d\260>c\260?c\257\071Bg\062'!A\061)A.$ZI?dUMbRH^LBO<\061\070"
  "$\035/\036\030\037\023\020\023\012\010\024\005\004M\061-\235\210z\260\231\210mO?>(\040\033"
  "\015\011\022\007\006\020\006\006\015\004\004\012\003\003\011\003\004\015\004\005\014\004\007\017\006\011\013\004\007\026"
  "\031\066=]\245Be\264Ae\263@d\262?b\261=`\256<_\255:\\\252\070Z\247\067X\245\065"
  "V\243\062S\240\061Q\235\061O\233/M\231-K\226,I\223,H\223*E\217(D\215&A\212H"
  "n\270Gm\267Fm\266Ek\266Ek\266Ej\265Dj\264Ci\264Ci\264Bi\264Ch\263Ag\262@"
  "`\247\063(*.#\036?/&OA:XIAdVM^MCM<\062@\061)<+$-\037\032\026\014\012>!\033\212pd\265"
  "\233\212\334\312\272\337\316\276\306\260\233\236\202mW;/\037\013\010\017\006\005"
  "\011\003\003\013\003\004\012\003\004\012\003\004\013\004\005\013\005\010\013\004\010\013\007\014,@vGk\267Ei\266"
  "Cg\265Bf\263Ae\262Ab\257?a\255=^\253:]\251\071Z\247\067X\245\067W\244\064T\240"
  "\062R\237\062O\233\060M\231/K\226.K\224+H\221+G\221Ls\273Kr\272Jq\271Jq\271"
  "Jp\270Io\270Ho\270Fn\267Fn\267Fn\266Em\266El\265>U\211*\040\036.#\036\067'\037"
  "QD>YLETD;N=\063I\070/D\063,\067+&\031\013\011[?\071\274\251\235\331\306\263\333\306"
  "\264\337\315\274\333\311\271\327\304\263\306\257\234\247\214wy]M\070\027\017"
  "\025\007\006\012\003\002\007\002\002\006\002\002\011\003\004\013\004\006\013\005\011\012\005\012\030\035\070Ij\263J"
  "n\272Hl\270Gk\267Ei\266Dg\263Be\263@c\257>a\255<_\253;]\251;[\250\070Y\245"
  "\067W\242\066U\240\063R\235\062P\233\062O\231\060M\227.L\224Pv\275Ov\275Ov\275"
  "Nt\273Nt\273Ls\273Ls\273Ks\273Jr\272Kq\272Kq\271Ip\267=Jr%\032\030\060$\037="
  "\060*PC=SD<H\070\060S?\064F\063+\065)$\"\027\023bG@\313\273\260\342\324\305\333\310"
  "\266\336\314\274\334\312\272\330\305\265\325\301\261\316\272\253\271\243"
  "\222\242\211v\207lZS\067+\036\012\007\013\003\003\012\004\004\011\004\004\010\003\004\013\005\007\016\010"
  "\015\020\013\022E`\235Os\275Lq\274Ko\272Jn\271Hl\266Fk\265Fi\264Cg\261Be\257"
  "@c\255?a\253<^\250;\\\246\071Z\243\065X\240\066V\237\064S\234\062R\233\061P\231"
  "U{\301T{\301Sz\300Ry\277Qx\276Pw\275Qw\276Pv\275Ov\275Nu\274Nt\273Nt\273"
  ":>Q$\031\026-\"\035J>\071L?\071D\064-P?\065L\065)\071+%*\037\032H,$\300\255\241\347"
  "\334\316\336\312\272\341\321\303\336\315\276\332\307\270\325\302\262\322"
  "\276\256\313\267\250\276\253\233\256\231\212\232\204u\203k^T\065*#\017\013\021"
  "\006\005\014\004\004\011\004\004\011\003\004\017\007\013\022\015\021:P\200Ty\300Qv\277Pu\276Os\274"
  "Mq\273Ko\271Im\266Gk\265Fi\263Dg\260Ae\255@b\253?a\251<_\247;]\245:Z\243"
  "\067X\240\066V\236\064U\234Y\200\303X\177\303X\177\302W~\302V}\302U|\301U|\301"
  "U{\301Sz\300Sz\300Sz\277Rv\273\064\060\071#\031\026-!\035F;\066<-'M>\067VE;>.')\040"
  "\034\061\036\031\216rg\341\324\306\337\315\275\343\324\305\341\321\303\335\315"
  "\274\331\310\271\325\300\257\320\274\254\310\263\242\276\251\232\263\236"
  "\217\244\221\203\216yns[RO\061&\040\016\013\026\012\010\013\003\003\014\004\005\016\006\007\025"
  "\016\022)\061TX}\302Uz\301Ty\300Rw\276Qv\276Ot\274Mr\271Kp\267Jn\266Il\264F"
  "j\262Eg\257Ce\255@c\253@b\251>`\247<]\244\071[\242\070Y\240^\205\307]\204\307"
  "[\202\305[\202\305[\201\305Z\200\304Z\200\303X\177\302X\177\303W~\302V}\301"
  "V{\275\066\065B\037\025\023\060&#=\060-<-'K;\063A/(/#\036#\030\026Q\065-\313\271\254"
  "\347\332\314\345\327\311\346\331\314\340\322\303\336\315\276\330\306\267"
  "\324\301\261\317\272\251\307\263\241\274\250\230\263\237\221\246\222\205"
  "\225\201u~ibiSKD,!\033\020\016\025\012\011\021\011\010\020\007\006\026\015\020\036\034-Tr\261"
  "[\177\305Z}\304X|\302V{\301Sy\276Rw\275Ou\273Ns\271Lp\267Jo\265Hm\263Fk\261"
  "Eh\257Cg\255Bd\252?b\250=`\247=^\245b\210\310a\210\311a\207\311_\205\310"
  "`\205\307_\205\310\\\203\306]\203\306[\202\305[\202\305Z\201\304[\200\301"
  "\065\061;\036\023\021/$\040\071,&F\070\060E\066.(\034\030%\031\024\037\020\016\202g\\\342"
  "\326\307\350\332\315\350\333\316\344\326\307\340\321\302\333\313\273\327"
  "\304\264\321\277\256\315\272\251\306\262\241\275\252\231\265\241\223\246"
  "\222\205\226\202w\203pim\\Y^I@(\027\021\035\022\020\024\011\010\021\006\006\026\014\016\034"
  "\024\027Ia\226_\204\307]\202\307\\\201\305Z\177\304Z~\304X|\302Uz\300Rw\275"
  "Qv\274Pt\272Nr\270Lq\266Mq\265Uv\267Mp\263Hk\260Cf\254Ad\253g\215\313f\214"
  "\312e\213\311d\212\311c\211\311b\210\310a\207\310`\207\307`\207\310_\206"
  "\307_\206\307a\206\305\065\066A\040\026\024.#\040\064&\040=/)\065'!!\026\022\032\020\015"
  "/\033\027\263\237\223\350\335\317\351\335\321\343\327\311\340\323\304\334\315"
  "\275\330\310\270\324\301\261\317\274\254\313\270\247\305\262\240\273\250"
  "\227\261\235\216\237\212~\210wqvebeUS^NI<*#\035\021\017\027\012\011\022\006\006\027\014"
  "\014\034\024\027\070Hre\211\313e\211\312f\210\311e\207\310b\205\307^\201\304]"
  "\202\304^\202\302c\204\303a\202\301f\207\302j\211\303n\214\303s\217\305l"
  "\211\301j\207\277_~\272St\265m\221\314l\221\314k\220\314i\216\313h\216\312"
  "g\216\312f\215\312e\214\311e\213\311d\212\311c\212\310b\206\301<AR\036\024"
  "\022-!\037\060\"\035\064$\036)\034\026\027\014\013\023\011\007O\067\061\320\302\264\310\274"
  "\256\233\214\200\210zn\222\205y\234\217\201\252\234\216\300\257\237\313\271"
  "\251\307\264\244\300\255\234\262\235\215\223\177riUNR<\070O<\065XF>I\071\063"
  "\060!\032\024\012\011\030\012\010\030\012\007\030\014\013\033\021\023+\061Qe\207\305k\216\314"
  "p\223\316u\225\316x\227\315}\234\317y\230\315x\227\314~\232\315}\232\315"
  "|\231\314x\225\311r\220\306t\220\305w\222\305|\227\307u\217\303]|\271q\226"
  "\315p\225\315o\224\315o\224\314m\222\314l\221\314l\221\313j\220\312i\217"
  "\311i\217\312g\216\311d\207\277=AT\040\026\023(\033\030)\033\026/\040\032\040\024\017"
  "\023\011\007\021\010\007E.(\253\232\213\276\253\233\301\256\235\256\232\206\226\177"
  "lydThJ<V\067,\252\224\204\301\256\234\266\240\217\233\204vdI?lRGu]QzdYzf]"
  "vaX_I>\024\010\005\032\013\007\032\013\007\035\016\012\033\021\020$)>[z\261l\220\316m\221\315"
  "r\224\315{\233\320~\234\317u\225\314s\222\312n\217\310l\215\306e\207\303"
  "b\205\301Y~\275V{\273Sx\271Pv\267Nt\265Mr\263u\231\316s\230\316t\230\316"
  "r\227\315r\227\315q\226\315p\225\314p\224\314n\223\314m\222\313m\222\313"
  "f\207\274>CW%\032\027$\027\024(\030\022)\031\024\027\012\007\022\011\007\024\011\007kVK\322\304"
  "\262\311\262\236\270\237\213\241\206r\233\177l\246\207r\256\216w\264\226"
  "~\273\241\215\277\250\223\252\221\200\215rg\200eYx^ShRHR?\067J\071\062]F=^B"
  "\067\"\021\012\030\012\007\035\014\010\037\016\011\034\020\015\033\027\040Wr\245p\224\317o\222"
  "\316n\221\315l\220\313o\222\313m\221\312j\216\311i\214\307e\211\305b\206"
  "\304_\203\301\\\201\277Y~\274X|\273Ty\271Rx\270Pv\267y\235\317x\234\317x"
  "\234\320w\233\317v\231\316u\231\316t\230\316s\230\316r\226\314q\226\314p"
  "\225\314l\216\302BJ_'\035\031#\025\021&\027\023#\024\017\023\007\006\020\007\005\023\010\006`E"
  "<\250\214x\212l[eL?B\061)\062!\033qQC\242~h\274\233~\316\263\230\316\267\237"
  "\251\214{\202eZs[PR<\065%&#\023\033\026MQRA\066\065F\061)\"\022\014\030\012\007\034\014"
  "\011\037\017\013\033\017\015\040\032([u\244u\230\320t\227\317r\225\317q\224\316o\222"
  "\314m\220\312j\216\311i\214\311f\212\306e\210\305b\206\303a\205\302_\203"
  "\300]\200\277Z\177\275X}\273V{\272\177\241\321}\237\321}\237\320{\236\317"
  "{\236\317y\235\317y\234\317w\233\316w\233\316v\232\316t\231\315r\225\310"
  "DG_(\036\033\037\021\015%\026\022!\021\014\022\006\005\021\006\005\024\011\007P\067-]E:`NITVW\034"
  "#!;>,vgg\200^N\274\235\204\340\311\257\344\323\276\273\240\217y[TYHBGCLC"
  "JQ*.$MKOQA?T<\064)\027\022\027\012\010\031\012\007\034\016\014\030\014\013\034\026\032]w\247"
  "x\233\320x\233\322w\232\320u\230\317t\227\316r\225\314p\223\313m\221\312"
  "k\216\310j\215\307h\213\306e\210\303d\207\302b\205\301`\203\277^\202\276"
  "\\\200\275\203\245\322\201\243\321\202\243\321\201\242\321\200\241\320\177"
  "\240\320~\240\320}\237\320|\236\317z\235\317y\234\316w\232\312CL`'\035\032"
  "\037\020\015#\024\017\037\016\011\023\006\005\022\007\005\020\005\004D,#|\\O\262\235\215\220\203"
  "\200bT;raS\211ic\225yi\325\301\257\353\333\311\357\341\321\312\261\235xU"
  "QN@@N>?ZFCcOJlZSn]X`NJ>+#\031\013\011\032\013\010\031\014\013\026\013\011\040\035(`z\247"
  "}\237\323}\237\323|\236\322{\234\321x\232\317v\231\316v\227\315s\225\314"
  "q\223\312n\221\311l\217\307j\215\306h\213\304e\211\302e\210\301b\206\300"
  "a\205\276\207\250\324\207\250\323\207\250\323\206\247\323\205\246\322\204"
  "\246\322\203\245\322\201\243\320\200\242\320\177\241\317~\240\317|\236\314"
  "HUm'\033\030\036\021\014!\022\016\036\015\011\023\007\005\023\007\005\024\007\005J\063-\233\200t\316"
  "\270\244\276\245\221\250\211w\237zh\247\207x\317\273\256\356\340\322\360"
  "\343\322\362\346\330\325\277\254\200]ZUEGTEI]NPeUTk\\]k^^dUSP<\065\036\016\012"
  "\034\015\012\030\012\010\025\012\010$\"\061d~\247\202\242\324\202\242\324\200\240\323"
  "\177\237\321}\235\320|\235\320z\232\317x\231\316v\227\314t\225\312r\223\311"
  "p\222\307m\220\306l\217\304i\214\303h\213\302f\212\300\215\254\325\214\254"
  "\324\213\253\324\212\252\323\212\252\324\211\251\323\207\250\322\207\247"
  "\322\205\246\321\204\246\320\202\244\320\201\244\317FRi#\030\025\035\017\014!"
  "\022\015\037\020\013\024\007\005\024\007\006\030\011\006^E=\270\244\226\336\317\276\324\301"
  "\260\307\261\240\307\262\242\325\302\263\353\336\322\362\346\331\362\343"
  "\325\363\345\330\335\306\265\216jd^MO\\NQaSTfVVj\\^l_`k]_]LF\040\020\013\033"
  "\014\011\030\013\010\025\011\007'$\060n\210\261\206\247\325\206\246\324\205\245\323"
  "\203\243\323\201\241\321\200\240\320\177\237\317|\234\315{\233\315y\232\313"
  "w\230\312u\226\310s\225\307q\223\306o\222\305n\220\304m\217\303\222\257\325"
  "\221\256\325\220\255\325\220\256\325\216\255\324\216\254\324\215\253\323"
  "\213\252\322\212\252\322\211\251\321\210\250\320\207\247\320Qb~\"\025\021\036"
  "\020\015\"\022\016\034\014\011\021\005\004\021\005\003\037\016\012tXN\323\301\261\344\324\303"
  "\337\316\277\327\304\265\332\307\267\345\325\306\355\340\322\357\340\320"
  "\360\337\317\361\342\322\345\320\300\241}saNQdVXgXZl\\]obbsfftfeeVS\035\016"
  "\012\031\013\010\030\012\007\026\011\006()\067p\212\257\213\252\325\212\252\324\211\250"
  "\324\207\246\323\206\245\322\205\244\322\203\243\320\201\241\317\177\237"
  "\316}\236\314{\233\313z\232\311x\230\310v\230\307u\227\306s\225\305r\224"
  "\304\230\262\326\226\261\325\226\261\325\225\260\325\223\257\325\222\257"
  "\324\222\256\323\221\256\323\220\255\323\216\253\322\214\253\322\213\252"
  "\321cx\226\"\026\023\035\020\015\037\021\015\033\014\010\023\006\004\021\005\003#\021\014\204g\\"
  "\337\317\300\347\330\310\344\324\304\341\320\301\342\320\300\346\323\304"
  "\346\324\303\352\330\306\356\335\314\360\337\317\353\333\314\270\233\215"
  "aHLfXWn^^qdduggxjixhfhYU\026\011\007\030\011\006\030\011\006\032\013\007)%/v\215\263\217"
  "\254\325\220\254\325\216\253\324\215\252\323\212\251\323\211\247\321\211"
  "\246\322\206\245\320\205\243\317\203\242\316\201\240\315~\236\314}\235\312"
  "|\234\312y\232\310x\231\307x\230\306\233\264\325\232\264\325\232\264\325"
  "\231\263\324\230\263\324\227\261\322\226\261\322\225\260\322\224\257\322"
  "\223\257\322\221\256\321\217\254\321v\216\256'\033\030\040\023\020\040\020\013\032"
  "\012\006\024\006\004\025\010\005!\017\012\210l`\340\323\303\350\332\313\345\327\310\341"
  "\321\301\341\320\301\337\313\272\337\310\266\346\323\301\357\333\307\357"
  "\335\315\352\332\315\272\236\221lQXfTSvhewiiykj{mi}lhdVQ\025\007\006\032\012\006\032"
  "\012\006\036\015\010\061\062A|\224\270\225\260\327\224\256\325\222\256\325\221\255"
  "\324\220\254\323\217\253\322\215\252\322\214\251\321\211\246\320\210\245"
  "\316\206\244\315\205\243\315\202\242\313\201\240\313\177\236\311~\236\311"
  "}\235\310\236\266\324\235\265\324\235\265\324\234\265\322\233\265\323\233"
  "\264\322\232\263\321\231\263\321\230\262\321\227\261\320\226\260\322\224"
  "\257\320\212\243\303\066\060\066&\031\024%\026\020\040\020\012\030\012\006\034\015\012\036"
  "\016\012\177dU\334\315\273\346\330\310\344\325\305\340\320\277\337\313\274"
  "\332\302\260\327\274\247\344\314\270\352\326\305\340\310\266\323\266\244"
  "\243~r}bZq\\Xugdxjfzkf~mf~meYKE\031\013\007\036\015\007\036\015\007\037\017\012=BT\206\236"
  "\300\231\263\326\230\263\326\227\262\325\226\261\324\225\260\324\224\256"
  "\323\221\256\322\220\255\321\217\252\320\215\252\320\213\250\316\211\246"
  "\315\210\245\315\207\244\314\205\244\313\204\242\312\203\241\311\242\267"
  "\323\241\267\323\240\267\322\240\266\322\237\265\321\237\266\321\235\265"
  "\320\235\264\321\234\263\320\232\262\320\231\261\317\230\260\317\227\257"
  "\316PWg*\035\030-\037\030*\031\022\037\021\013\035\017\014!\022\015lOA\321\276\253\344"
  "\323\302\343\321\301\337\313\271\332\304\263\330\277\255\327\276\252\327"
  "\273\245\305\233\207\234n^\251\204u\212fZrRFjUQk^^vfc{kd}le|ldD\071\064\033"
  "\014\007\037\016\010\036\015\007\036\021\021@GZ\222\252\312\236\266\326\235\265\326\234"
  "\265\325\233\264\324\232\263\324\231\262\323\227\260\322\226\260\321\225"
  "\257\321\223\255\320\221\254\317\220\253\316\216\252\316\214\250\315\214"
  "\250\315\212\246\314\211\246\312\245\271\322\244\270\322\243\270\321\242"
  "\267\320\241\267\320\241\267\320\240\265\317\237\265\317\236\263\316\235"
  "\263\316\234\262\315\232\262\315\231\261\315iw\214\060$\040\060\"\036\060\040\032"
  "&\027\022\"\024\020#\024\020]A\065\277\247\224\342\317\276\341\316\275\335\310\266"
  "\332\303\263\334\306\265\342\317\276\345\323\303\335\311\270\324\275\254"
  "\264\226\204\217qdiNLbPQhXYpa`yid}lexg`!\031\026\030\012\007\032\013\007\030\012\007\""
  "\030\032_k\202\227\255\313\242\271\326\241\271\326\241\270\326\240\267\325"
  "\237\266\325\235\266\324\234\264\323\233\263\322\231\262\321\231\261\321"
  "\226\260\317\225\257\317\223\255\316\222\254\315\222\254\315\220\253\314"
  "\217\251\313\250\271\321\247\271\321\247\271\321\245\270\320\245\267\320"
  "\245\267\317\244\267\317\243\266\316\242\265\315\241\264\315\237\263\315"
  "\236\262\314\235\261\313\202\223\251\065-..!\037\062$\037)\034\030%\026\021)\031\024"
  "[C\066\253\221\177\340\314\273\336\313\273\333\307\267\335\306\266\340\315"
  "\276\344\322\303\347\327\311\353\333\314\345\324\304\307\256\234\275\255"
  "\234\200e`dRShWWq`[we^{hagYS\011\003\002\024\007\005\026\011\010\030\014\013\061,\063p{\222"
  "\243\265\320\247\274\325\247\273\325\247\273\325\246\272\325\245\271\324"
  "\244\270\324\242\267\323\241\266\322\237\265\321\237\264\321\235\263\320"
  "\233\262\317\232\261\317\230\260\316\227\257\315\226\256\315\226\256\315"
  "\251\270\316\250\270\315\247\270\316\247\267\315\247\270\315\247\267\316"
  "\245\266\315\244\265\315\243\265\314\242\263\313\242\263\313\237\261\311"
  "\236\261\311\223\243\273FCI/$\"\060&$.\"\037,\037\032\066%\037eMA\237\206x\332"
  "\305\264\334\310\267\331\304\262\332\305\264\334\311\271\337\314\272\344"
  "\321\301\336\305\265\316\255\235\274\225\206\243xn\201[TuUPoVPxbZxd\\zf]"
  "OD?\010\002\001\020\005\004\030\014\015\034\022\023\071\067@y\205\233\252\273\323\254\275\325"
  "\254\275\325\253\275\325\252\275\325\251\274\324\250\273\323\247\272\323"
  "\246\271\323\245\270\322\243\267\321\242\266\320\241\265\320\240\265\317"
  "\236\263\316\235\263\316\234\263\316\233\261\315\251\267\313\250\267\313"
  "\250\267\313\247\266\312\247\266\312\247\266\312\246\265\312\245\264\311"
  "\244\263\310\243\263\310\242\262\307\241\261\306\241\260\306\236\255\303"
  "ip~\062%\"\060&%-#\"+!\037\066(#wbW\233\203w\323\276\253\333\305\262\330\300"
  "\255\323\271\247\310\260\234\301\243\220\270\220\177\242te\233i\\\220[N~"
  "MDnIDfFB^C@ubX{h^we\\$\040\035\005\001\001\016\003\002\032\022\025!\027\030MOZ\223\240\265"
  "\256\276\324\257\277\324\257\277\324\256\276\324\255\276\323\254\275\323"
  "\254\275\322\253\274\321\252\273\321\251\272\321\250\271\320\246\267\317"
  "\246\267\317\244\267\316\243\266\316\243\266\316\241\265\316\241\264\316"
  "\250\265\310\250\264\307\246\264\307\247\264\307\246\264\307\246\264\307"
  "\246\263\307\245\262\306\244\262\305\242\261\305\242\261\305\242\260\304"
  "\241\260\304\240\257\303\215\231\254MJP/#\036#\030\026\034\022\020\024\015\012n]U"
  "\232\206z\311\262\240\332\304\261\327\276\252\313\260\233\265\225\200\272"
  "\235\213\311\254\237\330\276\263\321\264\247\303\240\223\252\210\177~YXi"
  "JJfNIt`X|h^aRK\001\001\001\004\001\001\014\003\003\030\016\016\062*+nt\202\237\253\275\262\300"
  "\323\263\300\323\262\300\323\262\300\323\261\277\322\260\276\321\260\276"
  "\322\256\275\321\255\275\320\254\273\320\253\273\320\252\272\316\252\272"
  "\317\251\271\316\250\267\316\247\267\315\247\267\316\246\266\315\246\261"
  "\303\245\260\303\245\261\303\246\261\303\245\260\303\244\260\302\244\260"
  "\303\243\257\302\243\256\302\242\256\301\242\255\301\241\255\300\240\255"
  "\300\237\254\277\236\252\275\203\212\233C:<%\027\022\025\012\010\013\004\003.'%\222"
  "\201x\301\254\234\326\277\255\323\275\252\314\264\237\312\260\233\320\264"
  "\235\317\257\232\312\244\223\275\222\203\252|r\226lb\200]Tw\\Sv`W{h`zf]\064"
  "+'\001\000\000\003\001\001\015\004\003\035\022\021EAG\207\216\236\255\271\312\265\300\322\265"
  "\301\322\265\300\322\264\300\321\264\300\321\264\300\321\262\277\320\262"
  "\277\321\261\277\320\261\276\320\260\275\317\260\275\317\256\273\316\256"
  "\273\316\254\272\315\253\272\316\253\271\315\252\271\315\243\254\277\243"
  "\254\277\244\254\277\243\253\276\243\253\276\243\253\276\242\253\276\241"
  "\252\275\240\252\275\237\251\274\236\251\273\236\250\273\236\250\273\234"
  "\247\273\234\247\272\230\242\266~\205\225\065*(\034\020\014\024\011\007\006\002\002cRK"
  "\260\236\223\316\267\245\316\264\241\312\261\235\315\264\240\315\265\240"
  "\304\250\223\266\230\203\236|j\215l[~]Qx]Tu]Uye[|j`^OG\001\001\001\001\000\000\002\000\001"
  "\014\003\003+!\040a`i\234\244\265\265\300\320\266\277\317\267\300\320\267\300\317"
  "\267\300\317\267\300\320\266\277\320\265\276\317\264\277\317\264\276\317"
  "\263\275\317\262\274\316\261\273\315\262\272\315\260\273\315\257\272\313"
  "\255\271\313\254\270\313\254\271\313\237\250\272\237\247\272\237\247\272"
  "\237\247\271\236\246\271\236\246\271\236\246\271\235\245\270\234\245\267"
  "\233\245\267\233\244\267\233\243\266\231\243\265\230\243\265\230\243\266"
  "\227\242\265\230\237\263z~\215\064)(\035\020\013\021\006\004[I>\223\201x\266\244\232"
  "\312\263\241\311\260\235\312\260\234\315\264\240\320\271\244\316\272\246"
  "\312\263\240\300\246\223\251\217\177\203lfq]Yxd]l[S\031\024\023\001\000\001\000\000\000"
  "\004\000\001\021\007\005>\067:~\200\215\252\261\302\263\273\315\265\274\315\266\274\315"
  "\266\275\315\266\275\315\266\275\315\265\274\314\266\274\315\266\274\316"
  "\266\274\315\264\273\314\264\273\314\262\272\314\262\272\313\262\272\313"
  "\261\271\313\261\270\312\257\267\311\256\266\311\207\211\226\210\213\230"
  "\212\214\230\210\212\227\210\213\230\210\213\231\212\216\233\213\215\233"
  "\212\215\234\212\215\234\214\216\235\207\212\230\213\216\234\210\213\231"
  "\207\211\230\204\207\225\206\210\227}\202\223ebk\071,(*\032\025iVL\227\202w"
  "\260\236\220\257\235\221\300\252\230\316\266\241\326\276\254\335\312\271"
  "\336\315\274\330\303\263\307\260\240\256\230\213\211smva]q^W*#\040\001\001\001\001"
  "\000\001\000\000\000\004\001\002\030\015\013SNU\223\227\250\256\264\307\260\266\310\260\267"
  "\311\261\267\312\262\267\312\262\270\312\262\270\313\262\267\312\261\270"
  "\312\262\270\312\260\266\307\247\256\301\250\257\303\257\265\310\260\266"
  "\310\257\266\310\256\265\307\256\264\307\255\264\307\254\263\305urwwsxvs"
  "wvqvvqvyux}x{~y|\201{~\177y}zuyysyxtyrnupnuspwvryytzzu{h`cPCA\223|p\254\225"
  "\207\320\276\254\276\251\231\255\232\212\266\237\216\317\271\247\332\307"
  "\266\331\304\262\314\263\242\264\232\213\233\203y\206oi{e_A\065\061\001\000\001\001"
  "\000\000\001\000\000\000\000\000\010\002\002#\030\030c`m\233\237\261\253\260\303\252\260\303\253"
  "\260\303\254\260\304\253\257\303\254\261\304\254\260\304\253\260\303\245"
  "\252\276\240\245\271\230\234\262\226\232\262\223\227\257\224\231\260\231"
  "\236\264\241\250\274\234\242\267\224\230\260\212\217\251\221\226\256_^e_"
  "^d][ba_f`_d_]cb`egdikgliglgejfbihekdbj]^hSWeWZfcalhgpggpzvz\325\302\260\330"
  "\306\264\326\303\261\316\272\247\300\253\231\256\231\206\246\216~\270\237"
  "\217\275\244\223\255\222\203\230~r\214ti\200i_K=\067\001\000\001\002\000\001\002\000\001\002\000"
  "\001\002\000\001\014\005\005,\040\037ncf\225\215\224\233\224\234\234\224\235\233\224\234"
  "\234\225\236\233\224\236\232\224\236\230\222\236\226\222\237\226\223\242"
  "\226\223\241\224\222\243\223\221\243\221\221\243\217\220\245\216\220\244"
  "\214\217\244\217\220\245\215\216\245\215\217\245\207\211\240VW_ST]PQZTT\\"
  "WW]YX_YX^]]b_^c_]c[YaUU_NP\\OR^HM]=E[YZddcklionkq\203\202\205\336\313\271"
  "\333\310\265\326\303\261\320\275\252\307\262\237\270\242\215\241\211v\207"
  "n_\203k]zbVmWKZE:&\030\021\005\001\001\002\000\001\002\000\001\001\000\001\002\000\001\002\000\001\021\007\007\066)("
  "jab\204}\202\207\200\205\207\201\206\212\204\211\212\204\207\205\177\205"
  "\200|\202\210\202\207\215\204\210\215\204\210\217\206\211\221\207\212\215"
  "\203\206\214\203\205\215\203\205\213\201\204\210\177\204\206}\204\206~\204"
  "\203~\205xt\200FNaHN^TT^\\Z\\]Z[WVWSTVEFKONTUTY`\\`ha^g`[d_Vc^Xe_WSOGGIM"
  "\200\217\241\210\221\234\270\256\252\340\314\272\334\312\266\326\303\260"
  "\321\276\254\307\263\237\270\241\214\244\212w\202i[pWJaH<Q;\060?)\037\031\012"
  "\005\006\001\002\002\000\001\002\000\001\001\000\001\002\000\001\002\001\001\026\013\013\066+,a\\csqzzw\200vt~vu~v"
  "t\177}z\201vu~\202~\203\221\210\211\224\212\213\224\212\211\223\211\210\223"
  "\211\210\213\201\201\203{||vyuotvot{tx}wz{ux^ZNleW\\YNd_QogVe^QbZNofWqgX"
  "qhXjbSofWzn`\200\203\207\204\227\247\214\244\270\234\264\310\266\316\341"
  "\263\312\334\242\225\215\321\302\270\342\316\273\335\310\263\327\302\257"
  "\322\276\253\310\263\240\273\243\221\243\213z\204j]pWKcJ>W>\063B*\037\031\010"
  "\005\007\001\001\002\000\001\001\000\000\001\000\001\002\000\003\004\002\004\024\013\015\061).TXn_j\210`m\214bn\214"
  "cn\214^j\213Wf\210Yh\211fo\212~\177\217\214\205\212\220\210\211\217\210\206"
  "\206~\177\205}}uorhfka_gKMZKM[QS^cahWSGPMBQMCVQEhaPmdQpeSi`OocR\210|o\260"
  "\240\224\304\263\246\263\270\300\232\266\316\230\264\314\241\274\323\261"
  "\312\336\270\320\344\216\234\252\313\271\253\335\313\275\345\316\272\336"
  "\306\260\327\301\254\322\275\252\311\262\236\273\242\215\250\217|\231\200"
  "n\220wc\203gTrTCU\070+\071\"\030\025\010\005\003\001\001\001\000\001\001\000\000\002\000\003\005\003\006\017\010"
  "\013,$'VQT~z}\200}\203\204\200\204\202~\202zy\202zz\203rt\203mq\203io\201"
  "dk\201`i\200^f~Zb}T^{KXxIUsLWrFRo@Nl@Ml\067Hie]Ni^Oj^Ph]Ng]Mb[JkcPqhW\270"
  "\251\235\333\310\271\333\307\267\310\305\303\250\304\331\252\304\332\254"
  "\307\333\260\312\336\267\316\341\260\311\336\230\226\230\336\314\276\343"
  "\320\302\345\320\274\335\306\261\325\276\251\325\275\247\315\264\236\302"
  "\250\222\271\236\210\263\232\202\256\223{\246\212p\236\203jz_JH\060#-\031\020"
  "\025\010\005\003\001\001\002\000\001\003\001\004\004\002\005\013\006\014\032\024\031OF@\214}i\232\212s\224\206"
  "o\222\206o\233\217v\220\206n\177u`\205{d\207{f\213~h\204xc\205zd\202va\206"
  "zg\206{f\207{jzqetkdqkhfbdcagaYI]SDh]LeZKi]LsgT\202vc\316\277\263\343\320"
  "\301\341\315\276\331\311\271\261\306\331\256\310\335\257\311\335\272\322"
  "\345\274\324\346\273\323\345\242\273\320\207{w\341\320\302\346\325\307\345"
  "\323\301\333\306\262\330\303\257\327\300\253\321\271\243\315\264\236\311"
  "\256\227\303\251\221\300\245\213\274\240\206\263\227}{_ML\066)\062\036\025%\023"
  "\014\025\010\006\012\003\004\003\001\003\005\003\006\006\004\010\016\012\021\034\036\063PMY{sd\221\201k\231"
  "\211s\237\213t\241\220y\236\215w\231\212t\217\204m\226\211r\216\200i\217"
  "\203l\212\177g{qY\205}e\212\201kxpZ\211~g\200v`}u`\221\206ng]Jj`KpeQmeQy"
  "oZvmX\305\270\255\346\324\306\345\322\302\341\317\277\304\310\313\257\311"
  "\336\263\314\337\270\321\344\273\324\347\300\330\352\302\332\353\217\245"
  "\267<\060@\266\245\231\344\326\310\344\323\305\332\307\265\334\312\271\334"
  "\311\270\335\312\267\333\307\265\327\304\261\323\275\247\316\266\236\311"
  "\257\226\263\230\177tZJK\066)\067#\031\061\037\027&\030\023\030\015\013\012\006\006\007\005\007"
  "\006\004\010\007\005\013\022\023$\032%L$\067p]\\ttll\225\207q\220\206n\227\214t\231\214"
  "t\211|f\213~h\225\206o\226\206o\230\213v\207v`\221\202l\202wa\206|e\207|"
  "d|rZ\201w`qhQsiSriRnfOe^Ic\\G\232\220\204\346\326\310\351\330\311\350\327"
  "\307\337\320\303\262\312\335\255\307\334\263\314\340\271\322\344\276\325"
  "\350\301\330\351\276\326\350\203\224\245\222~u\217\210\211\256\237\224\305"
  "\267\254\326\304\263\340\320\301\345\326\310\352\334\317\354\341\326\346"
  "\330\312\331\306\263\323\275\247\315\265\235\235\207viQBM:.:(\037;+$\063'!"
  "!\027\024\022\014\013\021\015\015\025\021\025\013\012\021\014\015\035\025\040E\035\062h\"<y\""
  "=|-B{]at\206}n\223\205n\210|d\221\203l\216\177h\220\202k\202s^{pYxpXqjVv"
  "lXzq^\204ye\202xc\223\205msiQtiQndLlcMneO\326\310\274\351\331\313\352\333"
  "\315\351\331\313\310\320\327\261\313\337\257\311\335\270\321\345\273\323"
  "\346\275\325\350\276\325\347\274\325\347\254\255\261\321\303\270\276\254"
  "\235\234\227\232\247\226\212\213\205\203\306\273\264\311\277\266\332\320"
  "\305\335\322\306\320\302\263\314\273\252\250\226\206\241\224\211~mc_I<G\064"
  "*A\060'>\061*\064(##\032\027\023\016\015\021\014\015\033\027\031\030\026\036\025\030'\030%K\040"
  "\065h)E~(E\177&B~\061\066Z\061\063Kof_\230\211r\220\201k\227\207q\213|e\215\202"
  "l\213\202k\203yb\200u^\206}gwnZrhS\201t]~nXaYCcZE]U@ZS@\217\206y\345\326"
  "\307\351\332\313\352\334\316\347\333\316\266\315\337\263\314\340\264\315"
  "\341\270\321\344\275\326\350\274\325\346\276\326\347\272\322\346\276\262"
  "\256\345\323\305\336\314\275\273\253\242\272\252\235lTY\234\222\211\270\247"
  "\230\245\227\212\254\232\213\202yq\251\235\225YZ`\211\221\231mYNT?\063B/&"
  ";*#\066*%\067,'\"\031\027\023\016\015\021\014\014\"\036\037&$,+.=N^w\203\231\260\237"
  "\265\313\242\270\315\205\222\252\270\253\242\256\237\230\215\201\203wol\205"
  "yb\214~f\223\207o\214\200g\207|c~tZ\212\202i\204{b~u[\205zc\210|ezlWaU@b"
  "WC`TBWO<\271\255\237\346\325\307\347\327\307\353\333\315\325\326\326\266"
  "\317\342\267\317\342\266\317\343\271\322\345\274\324\346\273\323\346\274"
  "\324\346\261\310\332\325\304\267\352\332\316\351\332\316\330\305\265\316"
  "\276\256\321\277\261\275\255\242\342\317\276\275\254\235\326\303\262\233"
  "\240\245\240\270\314\217\240\260\200\204\210dQGJ\066+=+\"\070)\"\071-'\060&#"
  "!\032\030\020\013\013\025\017\020(#$\062\060\066AFSy\215\241\245\272\315\275\322\341"
  "\267\314\336\250\246\256\335\316\277\324\303\266\306\264\250\243\222\214"
  "mdh\210}f\204y]\216\201f\213}c\204y`\206}b\204z`\177sZ}qY\203v^~pZ",
};

class MyClient : public Client {
public:
  MyClient(const std::string& address, short port, const std::string& name) :
  Client{address, port, "asdn932lwnmflj23", 5000},
  name{name},
  color{Vec3::hsvToRgb({360*Rand::rand01(),0.5f,1.0f}), 1.0f}
  {
    for (uint32_t y = 0;y<image.height;++y) {
      for (uint32_t x = 0;x<image.width;++x) {
        const Vec3 rgb{0,0,0};
        image.setNormalizedValue(x,y,0,rgb.x());
        image.setNormalizedValue(x,y,1,rgb.y());
        image.setNormalizedValue(x,y,2,rgb.z());
        image.setValue(x,y,3,255);
      }
    }
  }

  void moveMouse(uint32_t userID, const Vec2& pos) {
    for (size_t i = 0;i<mouseInfos.size();++i) {
      if (mouseInfos[i].id == userID) {
        mouseInfos[i].pos = pos;
        break;
      }
    }
  }

  void addMouse(uint32_t userID, const std::string& name, const Vec4& color) {
    bool found{false};
    for (size_t i = 0;i<mouseInfos.size();++i) {
      if (mouseInfos[i].id == userID) {
        mouseInfos[i].name = name;
        mouseInfos[i].color = color;
        found = true;
        break;
      }
    }
    if (!found) {
      mouseInfos.push_back({userID, name, color, {0,0}});
    }
  }

  void removeMouse(uint32_t userID) {
    for (size_t i = 0;i<mouseInfos.size();++i) {
      if (mouseInfos[i].id == userID) {
        mouseInfos.erase(mouseInfos.begin()+i);
        break;
      }
    }
  }
  
  void initDataFromServer(const Image& serverImage,
                          const std::vector<MouseInfo>& mi) {
    image      = serverImage;
    mouseInfos = mi;
    initComplete = true;
  }
    
  virtual void handleNewConnection() override {
    NewUserPayload l(name, color);
    sendMessage(l.toString());
  }

  virtual void handleServerMessage(const std::string& message) override {
    PayloadType pt = identifyString(message);
       
    miMutex.lock();
    switch (pt) {
      case PayloadType::MousePosPayload : {
        MousePosPayload l(message);
        moveMouse(l.userID, l.mousePos);
        break;
      }
      case PayloadType::NewUserPayload  : {
        NewUserPayload l(message);
        addMouse(l.userID, l.name, l.color);
        break;
      }
      case PayloadType::LostUserPayload : {
        LostUserPayload l(message);
        removeMouse(l.userID);
        break;
      }
      case PayloadType::InitPayload : {
        InitPayload l(message);
        initDataFromServer(l.image, l.mouseInfos);
        break;
      }
      case PayloadType::CanvasUpdatePayload : {
        CanvasUpdatePayload l(message);
        paint(l.color, l.pos);
        break;
      }
      default:
        std::cout << "unknown message " << int(pt) << " received" << std::endl;
        break;
    };
    miMutex.unlock();
  }
  
  void setMousePos(const Vec2& normPos) {
    if (isConnecting() || !initComplete) {
      initComplete = false;
      return;
    }
    
    MousePosPayload m(normPos);
    sendMessage(m.toString());
  }
  
  void drawImage(const Vec2& normPos) {
    const Vec2i iPos{int((normPos.x()/2.0f+0.5f)*getImage().width),int((normPos.y()/2.0f+0.5f)*getImage().height)};
      
    int mx = iPos.x();
    int my = iPos.y();
 
    int i = 0;
    for (int y = gimp_image.height - 1; y >= 0; y--) {
        for (int x = 0; x < gimp_image.width; x++) {
            uint8_t r = gimp_image.pixel_data[i++];
            uint8_t g = gimp_image.pixel_data[i++];
            uint8_t b = gimp_image.pixel_data[i++];
            color = Vec4(float(r) / 255.0f, float(g) / 255.0f, float(b) / 255.0f, 0xff);
            paint(Vec2(x + mx, y + my));
        }
    }
  }
  
  void paint(const Vec2i& pos) {
    if (isConnecting() || !initComplete) {
      initComplete = false;
      return;
    }

    paint(color, pos);
    CanvasUpdatePayload m{color, pos};
    sendMessage(m.toString());
  }
  
  const std::vector<MouseInfo>& getOtherMouseInfos() const {
    return mouseInfos;
  }
    
  const Image& getImage() {
    if (isConnecting() || !initComplete) {
      initComplete = false;
    }
    return image;
  }
  
  void lockData() {
    miMutex.lock();
  }

  void unlockData() {
    miMutex.unlock();
  }

  Vec4 getColor() const {
    return color;
  }
  
  bool isValid() const {
    return initComplete;
  }
  
  void newColor() {
    color = Vec4{Vec3::hsvToRgb({360*Rand::rand01(),0.5f,1.0f}), 1.0f};
  }
  
private:
  std::mutex miMutex;
  std::vector<MouseInfo> mouseInfos;
  std::string name;
  Vec4 color;
  bool initComplete{false};
  Image image{imageWidth,imageHeight};
  
  
  void paint(const Vec4& color, const Vec2i& pos) {
    
    if (pos.x() < 0 || uint32_t(pos.x()) >= image.width) return;
    if (pos.y() < 0 || uint32_t(pos.y()) >= image.height) return;

    
    image.setNormalizedValue(pos.x(),pos.y(),0,color.x());
    image.setNormalizedValue(pos.x(),pos.y(),1,color.y());
    image.setNormalizedValue(pos.x(),pos.y(),2,color.z());
    image.setNormalizedValue(pos.x(),pos.y(),3,color.w());
  }

};

class MyGLApp : public GLApp {
public:

  MyGLApp(MyClient& client) : GLApp(1024, 786, 4, "Network Painter"), client(client) {}
  
  virtual void init() override {
    glEnv.setCursorMode(CursorMode::HIDDEN);
    GL(glEnable(GL_BLEND));
    GL(glBlendFunc(GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA));
    GL(glBlendEquation(GL_FUNC_ADD));
    GL(glClearColor(0.0f,0.0f,0.0f,0.0f));
  }

  void updateMousePos() {
    Dimensions s = glEnv.getWindowSize();
    normPos = Vec2{float(xPositionMouse/s.width)-0.5f,float(1.0-yPositionMouse/s.height)-0.5f} * 2.0f;
    normPos = (Mat4::inverse(userTransformation*baseTransformation) * Vec4{normPos,0.0f,1.0f}).xy();
  }
  
  void addTransformation(const Mat4& trafo) {
    userTransformation = trafo * userTransformation;
    updateMousePos();
  }
  
  void dropPaint() {
    const Vec2i iPos{int((normPos.x()/2.0f+0.5f)*client.getImage().width),int((normPos.y()/2.0f+0.5f)*client.getImage().height)};
    client.paint(iPos);
  }
  
  void updateBaseTransform() {
    const Dimensions s = glEnv.getWindowSize();
    const float ax = client.getImage().width/float(s.width);
    const float ay = client.getImage().height/float(s.height);
    const float m = std::max(ax,ay);
    baseTransformation = Mat4::scaling({ax/m, ay/m, 1.0f});
  }
    
  virtual void mouseMove(double xPosition, double yPosition) override {
    Dimensions s = glEnv.getWindowSize();
    if (xPosition < 0 || xPosition > s.width || yPosition < 0 || yPosition > s.height) return;
    
    xPositionMouse = xPosition;
    yPositionMouse = yPosition;
    updateMousePos();

    Vec2i iPos{int((normPos.x()/2.0f+0.5f)*client.getImage().width),int((normPos.y()/2.0f+0.5f)*client.getImage().height)};
    if (rightMouseDown) dropPaint();
    
    if (leftMouseDown) {
      const Vec2 trans = normPos - startDragPos;
      addTransformation(Mat4::translation(trans.x(), trans.y(), 0));
      startDragPos = normPos;
    }

    if (iPos != lastMousePos) {
      client.setMousePos(normPos);
    }
    lastMousePos = iPos;
  }
  
  virtual void mouseButton(int button, int state, int mods, double xPosition, double yPosition) override {
    if (button == GLFW_MOUSE_BUTTON_LEFT) {
      rightMouseDown = (state == GLFW_PRESS);
      dropPaint();
    }

    if (button == GLFW_MOUSE_BUTTON_RIGHT) {
      leftMouseDown = (state == GLFW_PRESS);
      if (state == GLFW_PRESS) {
        startDragPos = normPos;
      }
    }

  }
  
  virtual void mouseWheel(double x_offset, double y_offset, double xPosition, double yPosition) override {
    addTransformation(Mat4::translation(-normPos.x(), -normPos.y(), 0) *
                                        Mat4::scaling(1.0f+y_offset/100) *
                                        Mat4::translation(normPos.x(), normPos.y(), 0));
  }
  
  virtual void keyboard(int key, int scancode, int action, int mods) override {
    if (action == GLFW_PRESS) {
      switch (key) {
        case GLFW_KEY_ESCAPE:
          closeWindow();
          break;
        case GLFW_KEY_R:
          userTransformation = Mat4{};
          updateMousePos();
          break;
        case GLFW_KEY_C:
          client.newColor();
          break;
        case GLFW_KEY_I:
          client.drawImage(normPos);
          break;
      }
    }
  }
    
  virtual void draw() override {
    if (!client.isValid()) {
      std::cout << "." << std::flush;
      std::this_thread::sleep_for(std::chrono::milliseconds(100));
      GL(glClear(GL_COLOR_BUFFER_BIT));
      GL(glClearColor(1.0f,0.0f,0.0f,1.0f));
      return;
    }
    
    updateBaseTransform();
    
    GL(glClearColor(0.0f,0.0f,0.0f,0.0f));
    GL(glClear(GL_COLOR_BUFFER_BIT));
    client.lockData();
    setDrawTransform(userTransformation*baseTransformation);
    setImageFilter(GL_NEAREST,GL_NEAREST);
    drawImage(client.getImage());
    std::vector<float> glShape;
    const std::vector<MouseInfo> otherMice = client.getOtherMouseInfos();
    for (const MouseInfo& m : otherMice) {
      glShape.push_back(m.pos.x()); glShape.push_back(m.pos.y()); glShape.push_back(0.0f);
      glShape.push_back(m.color.x()); glShape.push_back(m.color.y()); glShape.push_back(m.color.z());  glShape.push_back(m.color.w());
    }
    Vec4 color{client.getColor()};
    client.unlockData();
    drawPoints(glShape, 10, true);
    
    glShape.clear();
    glShape.push_back(normPos.x()); glShape.push_back(normPos.y()); glShape.push_back(0.0f);
    glShape.push_back(color.r()); glShape.push_back(color.y()); glShape.push_back(color.z());  glShape.push_back(color.w());
    drawPoints(glShape, 40, true);
  }

private:
  MyClient& client;
  Vec2 normPos{};
  bool rightMouseDown{false};
  bool leftMouseDown{false};
  Vec2i lastMousePos{-1,-1};


  Vec2 startDragPos;
  double xPositionMouse;
  double yPositionMouse;
  Mat4 baseTransformation;
  Mat4 userTransformation;

};

int main(int argc, char ** argv) {

 if (argc != 3) {
    std::cerr << "Usage: " << argv[0] << " ServerIP YourName" << std::endl;
    return EXIT_FAILURE;
  }
 
  MyClient c{argv[1], 11001, argv[2]};
  std::cout << "connecting ...";
  while (c.isConnecting()) {
    std::cout << "." << std::flush;
    std::this_thread::sleep_for(std::chrono::milliseconds(100));
  }
  std::cout << " Done" << std::endl;
  
  if (c.isOK()) {
    try {
      MyGLApp myApp(c);
      myApp.run();
    } catch (const GLException& e) {
      std::cerr << "Insufficent OpenGL Support" << std::endl;
    }
    return EXIT_SUCCESS;
  } else {
    std::cerr << "Unable to start client" << std::endl;
    return EXIT_FAILURE;
  }
}
